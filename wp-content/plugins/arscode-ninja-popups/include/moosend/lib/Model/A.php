<?php
/**
 * A
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * A Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class A implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'A';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ab_version' => 'double',
        'campaign_delivered_on' => 'string',
        'campaign_id' => 'string',
        'campaign_is_archived' => 'bool',
        'campaign_name' => 'string',
        'campaign_subject' => 'string',
        'from' => 'string',
        'mailing_lists' => '\Swagger\Client\Model\MailingLists134[]',
        'sent' => 'double',
        'to' => 'string',
        'total_bounces' => 'double',
        'total_complaints' => 'double',
        'total_forwards' => 'double',
        'total_link_clicks' => 'double',
        'total_opens' => 'double',
        'total_unsubscribes' => 'double',
        'unique_forwards' => 'double',
        'unique_link_clicks' => 'double',
        'unique_opens' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ab_version' => 'double',
        'campaign_delivered_on' => null,
        'campaign_id' => null,
        'campaign_is_archived' => null,
        'campaign_name' => null,
        'campaign_subject' => null,
        'from' => null,
        'mailing_lists' => null,
        'sent' => 'double',
        'to' => null,
        'total_bounces' => 'double',
        'total_complaints' => 'double',
        'total_forwards' => 'double',
        'total_link_clicks' => 'double',
        'total_opens' => 'double',
        'total_unsubscribes' => 'double',
        'unique_forwards' => 'double',
        'unique_link_clicks' => 'double',
        'unique_opens' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'ab_version' => 'ABVersion',
        'campaign_delivered_on' => 'CampaignDeliveredOn',
        'campaign_id' => 'CampaignID',
        'campaign_is_archived' => 'CampaignIsArchived',
        'campaign_name' => 'CampaignName',
        'campaign_subject' => 'CampaignSubject',
        'from' => 'From',
        'mailing_lists' => 'MailingLists',
        'sent' => 'Sent',
        'to' => 'To',
        'total_bounces' => 'TotalBounces',
        'total_complaints' => 'TotalComplaints',
        'total_forwards' => 'TotalForwards',
        'total_link_clicks' => 'TotalLinkClicks',
        'total_opens' => 'TotalOpens',
        'total_unsubscribes' => 'TotalUnsubscribes',
        'unique_forwards' => 'UniqueForwards',
        'unique_link_clicks' => 'UniqueLinkClicks',
        'unique_opens' => 'UniqueOpens'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'ab_version' => 'setAbVersion',
        'campaign_delivered_on' => 'setCampaignDeliveredOn',
        'campaign_id' => 'setCampaignId',
        'campaign_is_archived' => 'setCampaignIsArchived',
        'campaign_name' => 'setCampaignName',
        'campaign_subject' => 'setCampaignSubject',
        'from' => 'setFrom',
        'mailing_lists' => 'setMailingLists',
        'sent' => 'setSent',
        'to' => 'setTo',
        'total_bounces' => 'setTotalBounces',
        'total_complaints' => 'setTotalComplaints',
        'total_forwards' => 'setTotalForwards',
        'total_link_clicks' => 'setTotalLinkClicks',
        'total_opens' => 'setTotalOpens',
        'total_unsubscribes' => 'setTotalUnsubscribes',
        'unique_forwards' => 'setUniqueForwards',
        'unique_link_clicks' => 'setUniqueLinkClicks',
        'unique_opens' => 'setUniqueOpens'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'ab_version' => 'getAbVersion',
        'campaign_delivered_on' => 'getCampaignDeliveredOn',
        'campaign_id' => 'getCampaignId',
        'campaign_is_archived' => 'getCampaignIsArchived',
        'campaign_name' => 'getCampaignName',
        'campaign_subject' => 'getCampaignSubject',
        'from' => 'getFrom',
        'mailing_lists' => 'getMailingLists',
        'sent' => 'getSent',
        'to' => 'getTo',
        'total_bounces' => 'getTotalBounces',
        'total_complaints' => 'getTotalComplaints',
        'total_forwards' => 'getTotalForwards',
        'total_link_clicks' => 'getTotalLinkClicks',
        'total_opens' => 'getTotalOpens',
        'total_unsubscribes' => 'getTotalUnsubscribes',
        'unique_forwards' => 'getUniqueForwards',
        'unique_link_clicks' => 'getUniqueLinkClicks',
        'unique_opens' => 'getUniqueOpens'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ab_version'] = isset($data['ab_version']) ? $data['ab_version'] : null;
        $this->container['campaign_delivered_on'] = isset($data['campaign_delivered_on']) ? $data['campaign_delivered_on'] : null;
        $this->container['campaign_id'] = isset($data['campaign_id']) ? $data['campaign_id'] : null;
        $this->container['campaign_is_archived'] = isset($data['campaign_is_archived']) ? $data['campaign_is_archived'] : null;
        $this->container['campaign_name'] = isset($data['campaign_name']) ? $data['campaign_name'] : null;
        $this->container['campaign_subject'] = isset($data['campaign_subject']) ? $data['campaign_subject'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['mailing_lists'] = isset($data['mailing_lists']) ? $data['mailing_lists'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['total_bounces'] = isset($data['total_bounces']) ? $data['total_bounces'] : null;
        $this->container['total_complaints'] = isset($data['total_complaints']) ? $data['total_complaints'] : null;
        $this->container['total_forwards'] = isset($data['total_forwards']) ? $data['total_forwards'] : null;
        $this->container['total_link_clicks'] = isset($data['total_link_clicks']) ? $data['total_link_clicks'] : null;
        $this->container['total_opens'] = isset($data['total_opens']) ? $data['total_opens'] : null;
        $this->container['total_unsubscribes'] = isset($data['total_unsubscribes']) ? $data['total_unsubscribes'] : null;
        $this->container['unique_forwards'] = isset($data['unique_forwards']) ? $data['unique_forwards'] : null;
        $this->container['unique_link_clicks'] = isset($data['unique_link_clicks']) ? $data['unique_link_clicks'] : null;
        $this->container['unique_opens'] = isset($data['unique_opens']) ? $data['unique_opens'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets ab_version
     * @return double
     */
    public function getAbVersion()
    {
        return $this->container['ab_version'];
    }

    /**
     * Sets ab_version
     * @param double $ab_version 
     * @return $this
     */
    public function setAbVersion($ab_version)
    {
        $this->container['ab_version'] = $ab_version;

        return $this;
    }

    /**
     * Gets campaign_delivered_on
     * @return string
     */
    public function getCampaignDeliveredOn()
    {
        return $this->container['campaign_delivered_on'];
    }

    /**
     * Sets campaign_delivered_on
     * @param string $campaign_delivered_on 
     * @return $this
     */
    public function setCampaignDeliveredOn($campaign_delivered_on)
    {
        $this->container['campaign_delivered_on'] = $campaign_delivered_on;

        return $this;
    }

    /**
     * Gets campaign_id
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     * @param string $campaign_id 
     * @return $this
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets campaign_is_archived
     * @return bool
     */
    public function getCampaignIsArchived()
    {
        return $this->container['campaign_is_archived'];
    }

    /**
     * Sets campaign_is_archived
     * @param bool $campaign_is_archived 
     * @return $this
     */
    public function setCampaignIsArchived($campaign_is_archived)
    {
        $this->container['campaign_is_archived'] = $campaign_is_archived;

        return $this;
    }

    /**
     * Gets campaign_name
     * @return string
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     * @param string $campaign_name 
     * @return $this
     */
    public function setCampaignName($campaign_name)
    {
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets campaign_subject
     * @return string
     */
    public function getCampaignSubject()
    {
        return $this->container['campaign_subject'];
    }

    /**
     * Sets campaign_subject
     * @param string $campaign_subject 
     * @return $this
     */
    public function setCampaignSubject($campaign_subject)
    {
        $this->container['campaign_subject'] = $campaign_subject;

        return $this;
    }

    /**
     * Gets from
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     * @param string $from 
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets mailing_lists
     * @return \Swagger\Client\Model\MailingLists134[]
     */
    public function getMailingLists()
    {
        return $this->container['mailing_lists'];
    }

    /**
     * Sets mailing_lists
     * @param \Swagger\Client\Model\MailingLists134[] $mailing_lists 
     * @return $this
     */
    public function setMailingLists($mailing_lists)
    {
        $this->container['mailing_lists'] = $mailing_lists;

        return $this;
    }

    /**
     * Gets sent
     * @return double
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     * @param double $sent 
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets to
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     * @param string $to 
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets total_bounces
     * @return double
     */
    public function getTotalBounces()
    {
        return $this->container['total_bounces'];
    }

    /**
     * Sets total_bounces
     * @param double $total_bounces 
     * @return $this
     */
    public function setTotalBounces($total_bounces)
    {
        $this->container['total_bounces'] = $total_bounces;

        return $this;
    }

    /**
     * Gets total_complaints
     * @return double
     */
    public function getTotalComplaints()
    {
        return $this->container['total_complaints'];
    }

    /**
     * Sets total_complaints
     * @param double $total_complaints 
     * @return $this
     */
    public function setTotalComplaints($total_complaints)
    {
        $this->container['total_complaints'] = $total_complaints;

        return $this;
    }

    /**
     * Gets total_forwards
     * @return double
     */
    public function getTotalForwards()
    {
        return $this->container['total_forwards'];
    }

    /**
     * Sets total_forwards
     * @param double $total_forwards 
     * @return $this
     */
    public function setTotalForwards($total_forwards)
    {
        $this->container['total_forwards'] = $total_forwards;

        return $this;
    }

    /**
     * Gets total_link_clicks
     * @return double
     */
    public function getTotalLinkClicks()
    {
        return $this->container['total_link_clicks'];
    }

    /**
     * Sets total_link_clicks
     * @param double $total_link_clicks 
     * @return $this
     */
    public function setTotalLinkClicks($total_link_clicks)
    {
        $this->container['total_link_clicks'] = $total_link_clicks;

        return $this;
    }

    /**
     * Gets total_opens
     * @return double
     */
    public function getTotalOpens()
    {
        return $this->container['total_opens'];
    }

    /**
     * Sets total_opens
     * @param double $total_opens 
     * @return $this
     */
    public function setTotalOpens($total_opens)
    {
        $this->container['total_opens'] = $total_opens;

        return $this;
    }

    /**
     * Gets total_unsubscribes
     * @return double
     */
    public function getTotalUnsubscribes()
    {
        return $this->container['total_unsubscribes'];
    }

    /**
     * Sets total_unsubscribes
     * @param double $total_unsubscribes 
     * @return $this
     */
    public function setTotalUnsubscribes($total_unsubscribes)
    {
        $this->container['total_unsubscribes'] = $total_unsubscribes;

        return $this;
    }

    /**
     * Gets unique_forwards
     * @return double
     */
    public function getUniqueForwards()
    {
        return $this->container['unique_forwards'];
    }

    /**
     * Sets unique_forwards
     * @param double $unique_forwards 
     * @return $this
     */
    public function setUniqueForwards($unique_forwards)
    {
        $this->container['unique_forwards'] = $unique_forwards;

        return $this;
    }

    /**
     * Gets unique_link_clicks
     * @return double
     */
    public function getUniqueLinkClicks()
    {
        return $this->container['unique_link_clicks'];
    }

    /**
     * Sets unique_link_clicks
     * @param double $unique_link_clicks 
     * @return $this
     */
    public function setUniqueLinkClicks($unique_link_clicks)
    {
        $this->container['unique_link_clicks'] = $unique_link_clicks;

        return $this;
    }

    /**
     * Gets unique_opens
     * @return double
     */
    public function getUniqueOpens()
    {
        return $this->container['unique_opens'];
    }

    /**
     * Sets unique_opens
     * @param double $unique_opens 
     * @return $this
     */
    public function setUniqueOpens($unique_opens)
    {
        $this->container['unique_opens'] = $unique_opens;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


