<?php
/**
 * Sender
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Sender Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Sender implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Sender';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created_on' => 'string',
        'dkim_public' => 'string',
        'dkim_verified' => 'bool',
        'email' => 'string',
        'id' => 'string',
        'is_enabled' => 'bool',
        'name' => 'string',
        'spf_verified' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created_on' => null,
        'dkim_public' => null,
        'dkim_verified' => null,
        'email' => null,
        'id' => null,
        'is_enabled' => null,
        'name' => null,
        'spf_verified' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'created_on' => 'CreatedOn',
        'dkim_public' => 'DkimPublic',
        'dkim_verified' => 'DkimVerified',
        'email' => 'Email',
        'id' => 'ID',
        'is_enabled' => 'IsEnabled',
        'name' => 'Name',
        'spf_verified' => 'SpfVerified'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'created_on' => 'setCreatedOn',
        'dkim_public' => 'setDkimPublic',
        'dkim_verified' => 'setDkimVerified',
        'email' => 'setEmail',
        'id' => 'setId',
        'is_enabled' => 'setIsEnabled',
        'name' => 'setName',
        'spf_verified' => 'setSpfVerified'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'created_on' => 'getCreatedOn',
        'dkim_public' => 'getDkimPublic',
        'dkim_verified' => 'getDkimVerified',
        'email' => 'getEmail',
        'id' => 'getId',
        'is_enabled' => 'getIsEnabled',
        'name' => 'getName',
        'spf_verified' => 'getSpfVerified'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['dkim_public'] = isset($data['dkim_public']) ? $data['dkim_public'] : null;
        $this->container['dkim_verified'] = isset($data['dkim_verified']) ? $data['dkim_verified'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['spf_verified'] = isset($data['spf_verified']) ? $data['spf_verified'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets created_on
     * @return string
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     * @param string $created_on 
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets dkim_public
     * @return string
     */
    public function getDkimPublic()
    {
        return $this->container['dkim_public'];
    }

    /**
     * Sets dkim_public
     * @param string $dkim_public 
     * @return $this
     */
    public function setDkimPublic($dkim_public)
    {
        $this->container['dkim_public'] = $dkim_public;

        return $this;
    }

    /**
     * Gets dkim_verified
     * @return bool
     */
    public function getDkimVerified()
    {
        return $this->container['dkim_verified'];
    }

    /**
     * Sets dkim_verified
     * @param bool $dkim_verified 
     * @return $this
     */
    public function setDkimVerified($dkim_verified)
    {
        $this->container['dkim_verified'] = $dkim_verified;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_enabled
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     * @param bool $is_enabled 
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name 
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets spf_verified
     * @return bool
     */
    public function getSpfVerified()
    {
        return $this->container['spf_verified'];
    }

    /**
     * Sets spf_verified
     * @param bool $spf_verified 
     * @return $this
     */
    public function setSpfVerified($spf_verified)
    {
        $this->container['spf_verified'] = $spf_verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


